import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  Card,
  Table,
  Rate,
  Typography,
  Tag,
  Space,
  Button,
  Select,
  Input,
  Modal,
  Avatar,
  Row,
  Col,
  Statistic,
  Progress,
  Spin,
  Alert,
  Tooltip,
  message,
} from 'antd';
import {
  StarOutlined,
  UserOutlined,
  SearchOutlined,
  EyeOutlined,
  CheckOutlined,
  CloseOutlined,
  MessageOutlined,
} from '@ant-design/icons';
import moment from 'moment';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;

const Feedback = () => {
  const [loading, setLoading] = useState(false);
  const [feedbacks, setFeedbacks] = useState([]);
  const [filteredFeedbacks, setFilteredFeedbacks] = useState([]);
  const [filters, setFilters] = useState({
    search: '',
    rating: null,
    doctor: null,
    status: null,
  });
  const [selectedFeedback, setSelectedFeedback] = useState(null);
  const [detailModalVisible, setDetailModalVisible] = useState(false);

  // Mock data
  const mockFeedbacks = [
    {
      key: '1',
      id: 'FB001',
      patientName: 'Nguy·ªÖn VƒÉn An',
      doctorName: 'BS. Nguy·ªÖn VƒÉn ƒê·ª©c',
      specialty: 'Tim m·∫°ch',
      rating: 5,
      comment: 'B√°c sƒ© r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp. Kh√°m b·ªánh r·∫•t k·ªπ l∆∞·ª°ng v√† gi·∫£i th√≠ch r√µ r√†ng v·ªÅ t√¨nh tr·∫°ng b·ªánh.',
      date: '2024-01-15',
      status: 'approved',
      categories: {
        doctorProfessionalism: 5,
        waitTime: 4,
        facilityCleaniness: 5,
        staffFriendliness: 5,
        overallExperience: 5,
      },
      wouldRecommend: true,
      anonymous: false,
      helpfulVotes: 12,
    },
    {
      key: '2',
      id: 'FB002',
      patientName: 'Tr·∫ßn Th·ªã B√¨nh',
      doctorName: 'BS. Tr·∫ßn Th·ªã Lan',
      specialty: 'Da li·ªÖu',
      rating: 4,
      comment: 'D·ªãch v·ª• t·ªët, nh√¢n vi√™n th√¢n thi·ªán. Th·ªùi gian ch·ªù h∆°i l√¢u nh∆∞ng b√°c sƒ© kh√°m r·∫•t c·∫©n th·∫≠n.',
      date: '2024-01-14',
      status: 'approved',
      categories: {
        doctorProfessionalism: 4,
        waitTime: 3,
        facilityCleaniness: 4,
        staffFriendliness: 5,
        overallExperience: 4,
      },
      wouldRecommend: true,
      anonymous: false,
      helpfulVotes: 8,
    },
    {
      key: '3',
      id: 'FB003',
      patientName: 'L√™ VƒÉn C∆∞·ªùng',
      doctorName: 'BS. L√™ Minh Ho√†ng',
      specialty: 'Th·∫ßn kinh',
      rating: 5,
      comment: 'Ph√≤ng kh√°m s·∫°ch s·∫Ω, trang thi·∫øt b·ªã hi·ªán ƒë·∫°i. B√°c sƒ© gi·∫£i th√≠ch r·∫•t r√µ r√†ng v·ªÅ ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã.',
      date: '2024-01-13',
      status: 'approved',
      categories: {
        doctorProfessionalism: 5,
        waitTime: 4,
        facilityCleaniness: 5,
        staffFriendliness: 4,
        overallExperience: 5,
      },
      wouldRecommend: true,
      anonymous: false,
      helpfulVotes: 15,
    },
    {
      key: '4',
      id: 'FB004',
      patientName: 'Ph·∫°m Th·ªã Dung',
      doctorName: 'BS. Ph·∫°m Th·ªã Hoa',
      specialty: 'Nhi khoa',
      rating: 3,
      comment: 'C·∫ßn c·∫£i thi·ªán th·ªùi gian ch·ªù ƒë·ª£i. B√°c sƒ© kh√°m t·ªët nh∆∞ng th√°i ƒë·ªô nh√¢n vi√™n l·ªÖ t√¢n ch∆∞a th·∫≠t s·ª± nhi·ªát t√¨nh.',
      date: '2024-01-12',
      status: 'pending',
      categories: {
        doctorProfessionalism: 4,
        waitTime: 2,
        facilityCleaniness: 4,
        staffFriendliness: 2,
        overallExperience: 3,
      },
      wouldRecommend: false,
      anonymous: false,
      helpfulVotes: 3,
    },
    {
      key: '5',
      id: 'FB005',
      patientName: 'Ng∆∞·ªùi d√πng ·∫©n danh',
      doctorName: 'BS. V√µ VƒÉn Th√†nh',
      specialty: 'Ch·ªânh h√¨nh',
      rating: 5,
      comment: 'R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª•. S·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√® v√† ng∆∞·ªùi th√¢n.',
      date: '2024-01-11',
      status: 'approved',
      categories: {
        doctorProfessionalism: 5,
        waitTime: 5,
        facilityCleaniness: 4,
        staffFriendliness: 5,
        overallExperience: 5,
      },
      wouldRecommend: true,
      anonymous: true,
      helpfulVotes: 20,
    },
  ];

  const mockStats = {
    totalFeedbacks: 156,
    avgRating: 4.3,
    approvedFeedbacks: 142,
    pendingFeedbacks: 14,
    recommendationRate: 87.2,
  };

  useEffect(() => {
    setLoading(true);
    // Simulate API call
    setTimeout(() => {
      setFeedbacks(mockFeedbacks);
      setFilteredFeedbacks(mockFeedbacks);
      setLoading(false);
    }, 1000);
  }, []);

  useEffect(() => {
    let filtered = mockFeedbacks;

    if (filters.search) {
      filtered = filtered.filter(
        (feedback) =>
          feedback.patientName.toLowerCase().includes(filters.search.toLowerCase()) ||
          feedback.doctorName.toLowerCase().includes(filters.search.toLowerCase()) ||
          feedback.comment.toLowerCase().includes(filters.search.toLowerCase())
      );
    }

    if (filters.rating) {
      filtered = filtered.filter((feedback) => feedback.rating === filters.rating);
    }

    if (filters.doctor) {
      filtered = filtered.filter((feedback) => feedback.doctorName === filters.doctor);
    }

    if (filters.status) {
      filtered = filtered.filter((feedback) => feedback.status === filters.status);
    }

    setFilteredFeedbacks(filtered);
  }, [filters]);

  const getStatusColor = (status) => {
    switch (status) {
      case 'approved':
        return 'green';
      case 'pending':
        return 'orange';
      case 'rejected':
        return 'red';
      default:
        return 'default';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'approved':
        return 'ƒê√£ duy·ªát';
      case 'pending':
        return 'Ch·ªù duy·ªát';
      case 'rejected':
        return 'T·ª´ ch·ªëi';
      default:
        return status;
    }
  };

  const handleViewDetail = (feedback) => {
    setSelectedFeedback(feedback);
    setDetailModalVisible(true);
  };

  const handleApprove = (feedbackId) => {
    message.success(`ƒê√£ duy·ªát ƒë√°nh gi√° ${feedbackId}`);
    // Update feedback status in real app
  };

  const handleReject = (feedbackId) => {
    message.warning(`ƒê√£ t·ª´ ch·ªëi ƒë√°nh gi√° ${feedbackId}`);
    // Update feedback status in real app
  };

  const columns = [
    {
      title: 'B·ªánh nh√¢n',
      dataIndex: 'patientName',
      key: 'patientName',
      render: (name, record) => (
        <Space>
          <Avatar size="small" icon={<UserOutlined />} />
          <div>
            <Text strong>{name}</Text>
            {record.anonymous && <Tag size="small" color="blue">·∫®n danh</Tag>}
          </div>
        </Space>
      ),
    },
    {
      title: 'B√°c sƒ©',
      dataIndex: 'doctorName',
      key: 'doctorName',
      render: (name, record) => (
        <div>
          <Text strong>{name}</Text>
          <br />
          <Text type="secondary" style={{ fontSize: '12px' }}>
            {record.specialty}
          </Text>
        </div>
      ),
    },
    {
      title: 'ƒê√°nh gi√°',
      dataIndex: 'rating',
      key: 'rating',
      render: (rating) => (
        <div>
          <Rate disabled defaultValue={rating} style={{ fontSize: '16px' }} />
          <Text strong style={{ marginLeft: '8px' }}>
            {rating}/5
          </Text>
        </div>
      ),
      sorter: (a, b) => a.rating - b.rating,
    },
    {
      title: 'Nh·∫≠n x√©t',
      dataIndex: 'comment',
      key: 'comment',
      ellipsis: true,
      render: (comment) => (
        <Tooltip title={comment}>
          <Text>{comment.length > 50 ? `${comment.substring(0, 50)}...` : comment}</Text>
        </Tooltip>
      ),
    },
    {
      title: 'Ng√†y',
      dataIndex: 'date',
      key: 'date',
      render: (date) => moment(date).format('DD/MM/YYYY'),
      sorter: (a, b) => moment(a.date).unix() - moment(b.date).unix(),
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      render: (status) => (
        <Tag color={getStatusColor(status)}>{getStatusText(status)}</Tag>
      ),
    },
    {
      title: 'H·ªØu √≠ch',
      dataIndex: 'helpfulVotes',
      key: 'helpfulVotes',
      render: (votes) => (
        <Space>
          <Text>{votes}</Text>
          <Text type="secondary">üëç</Text>
        </Space>
      ),
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Tooltip title="Xem chi ti·∫øt">
            <Button
              type="text"
              icon={<EyeOutlined />}
              onClick={() => handleViewDetail(record)}
              size="small"
            />
          </Tooltip>
          {record.status === 'pending' && (
            <>
              <Tooltip title="Duy·ªát">
                <Button
                  type="text"
                  icon={<CheckOutlined />}
                  onClick={() => handleApprove(record.id)}
                  size="small"
                  style={{ color: '#52c41a' }}
                />
              </Tooltip>
              <Tooltip title="T·ª´ ch·ªëi">
                <Button
                  type="text"
                  icon={<CloseOutlined />}
                  onClick={() => handleReject(record.id)}
                  size="small"
                  danger
                />
              </Tooltip>
            </>
          )}
        </Space>
      ),
    },
  ];

  const uniqueDoctors = [...new Set(mockFeedbacks.map(f => f.doctorName))];

  return (
    <div>
      <div style={{ marginBottom: '24px' }}>
        <Title level={2}>ƒê√°nh Gi√° B·ªánh Nh√¢n</Title>
        <Text type="secondary">
          Qu·∫£n l√Ω v√† theo d√µi ph·∫£n h·ªìi t·ª´ b·ªánh nh√¢n
        </Text>
      </div>

      {/* Statistics */}
      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="T·ªïng ƒë√°nh gi√°"
              value={mockStats.totalFeedbacks}
              prefix={<MessageOutlined />}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="ƒêi·ªÉm trung b√¨nh"
              value={mockStats.avgRating}
              suffix="/ 5"
              prefix={<StarOutlined />}
              valueStyle={{ color: '#fadb14' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="ƒê√£ duy·ªát"
              value={mockStats.approvedFeedbacks}
              valueStyle={{ color: '#52c41a' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="T·ª∑ l·ªá khuy·∫øn ngh·ªã"
              value={mockStats.recommendationRate}
              suffix="%"
              valueStyle={{ color: '#722ed1' }}
            />
          </Card>
        </Col>
      </Row>

      {/* Filters */}
      <Card style={{ marginBottom: '24px' }}>
        <Row gutter={16} align="middle">
          <Col xs={24} sm={8} md={6}>
            <Input
              placeholder="T√¨m ki·∫øm..."
              prefix={<SearchOutlined />}
              value={filters.search}
              onChange={(e) => setFilters({ ...filters, search: e.target.value })}
            />
          </Col>
          <Col xs={24} sm={8} md={4}>
            <Select
              placeholder="ƒêi·ªÉm ƒë√°nh gi√°"
              value={filters.rating}
              onChange={(value) => setFilters({ ...filters, rating: value })}
              allowClear
              style={{ width: '100%' }}
            >
              <Option value={5}>5 sao</Option>
              <Option value={4}>4 sao</Option>
              <Option value={3}>3 sao</Option>
              <Option value={2}>2 sao</Option>
              <Option value={1}>1 sao</Option>
            </Select>
          </Col>
          <Col xs={24} sm={8} md={6}>
            <Select
              placeholder="Ch·ªçn b√°c sƒ©"
              value={filters.doctor}
              onChange={(value) => setFilters({ ...filters, doctor: value })}
              allowClear
              style={{ width: '100%' }}
            >
              {uniqueDoctors.map(doctor => (
                <Option key={doctor} value={doctor}>{doctor}</Option>
              ))}
            </Select>
          </Col>
          <Col xs={24} sm={8} md={4}>
            <Select
              placeholder="Tr·∫°ng th√°i"
              value={filters.status}
              onChange={(value) => setFilters({ ...filters, status: value })}
              allowClear
              style={{ width: '100%' }}
            >
              <Option value="approved">ƒê√£ duy·ªát</Option>
              <Option value="pending">Ch·ªù duy·ªát</Option>
              <Option value="rejected">T·ª´ ch·ªëi</Option>
            </Select>
          </Col>
        </Row>
      </Card>

      {/* Feedback Table */}
      <Card title={`Danh s√°ch ƒë√°nh gi√° (${filteredFeedbacks.length})`}>
        <Table
          columns={columns}
          dataSource={filteredFeedbacks}
          loading={loading}
          pagination={{
            pageSize: 10,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              `${range[0]}-${range[1]} c·ªßa ${total} ƒë√°nh gi√°`,
          }}
          scroll={{ x: 800 }}
        />
      </Card>

      {/* Detail Modal */}
      <Modal
        title="Chi ti·∫øt ƒë√°nh gi√°"
        open={detailModalVisible}
        onCancel={() => setDetailModalVisible(false)}
        footer={null}
        width={700}
      >
        {selectedFeedback && (
          <div>
            <Row gutter={16} style={{ marginBottom: '16px' }}>
              <Col span={12}>
                <Text strong>B·ªánh nh√¢n: </Text>
                <Text>{selectedFeedback.patientName}</Text>
              </Col>
              <Col span={12}>
                <Text strong>B√°c sƒ©: </Text>
                <Text>{selectedFeedback.doctorName}</Text>
              </Col>
            </Row>
            
            <Row gutter={16} style={{ marginBottom: '16px' }}>
              <Col span={12}>
                <Text strong>Chuy√™n khoa: </Text>
                <Text>{selectedFeedback.specialty}</Text>
              </Col>
              <Col span={12}>
                <Text strong>Ng√†y: </Text>
                <Text>{moment(selectedFeedback.date).format('DD/MM/YYYY')}</Text>
              </Col>
            </Row>

            <div style={{ marginBottom: '16px' }}>
              <Text strong>ƒê√°nh gi√° t·ªïng th·ªÉ: </Text>
              <Rate disabled defaultValue={selectedFeedback.rating} />
              <Text strong style={{ marginLeft: '8px' }}>
                {selectedFeedback.rating}/5
              </Text>
            </div>

            <div style={{ marginBottom: '16px' }}>
              <Text strong>ƒê√°nh gi√° chi ti·∫øt:</Text>
              <div style={{ marginTop: '8px', paddingLeft: '16px' }}>
                <div style={{ marginBottom: '8px' }}>
                  <Text>Chuy√™n m√¥n b√°c sƒ©: </Text>
                  <Rate disabled defaultValue={selectedFeedback.categories.doctorProfessionalism} size="small" />
                </div>
                <div style={{ marginBottom: '8px' }}>
                  <Text>Th·ªùi gian ch·ªù: </Text>
                  <Rate disabled defaultValue={selectedFeedback.categories.waitTime} size="small" />
                </div>
                <div style={{ marginBottom: '8px' }}>
                  <Text>V·ªá sinh c∆° s·ªü: </Text>
                  <Rate disabled defaultValue={selectedFeedback.categories.facilityCleaniness} size="small" />
                </div>
                <div style={{ marginBottom: '8px' }}>
                  <Text>Th√°i ƒë·ªô nh√¢n vi√™n: </Text>
                  <Rate disabled defaultValue={selectedFeedback.categories.staffFriendliness} size="small" />
                </div>
              </div>
            </div>

            <div style={{ marginBottom: '16px' }}>
              <Text strong>Nh·∫≠n x√©t:</Text>
              <Paragraph style={{ marginTop: '8px', padding: '12px', backgroundColor: '#f5f5f5', borderRadius: '6px' }}>
                {selectedFeedback.comment}
              </Paragraph>
            </div>

            <Row gutter={16}>
              <Col span={12}>
                <Text strong>Khuy·∫øn ngh·ªã: </Text>
                <Tag color={selectedFeedback.wouldRecommend ? 'green' : 'red'}>
                  {selectedFeedback.wouldRecommend ? 'C√≥' : 'Kh√¥ng'}
                </Tag>
              </Col>
              <Col span={12}>
                <Text strong>H·ªØu √≠ch: </Text>
                <Text>{selectedFeedback.helpfulVotes} üëç</Text>
              </Col>
            </Row>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default Feedback;